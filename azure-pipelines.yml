# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: CredScan@2
  inputs:
    toolMajorVersion: 'V2'

- task: SdtReport@1
  inputs:
    AllTools: false
    APIScan: false
    BinSkim: false
    CodesignValidation: false
    CredScan: true
    FortifySCA: false
    FxCop: false
    ModernCop: false
    MSRD: false
    PoliCheck: false
    RoslynAnalyzers: false
    SDLNativeRules: false
    Semmle: false
    TSLint: false
    ToolLogsNotFoundAction: 'Standard'

- task: PublishSecurityAnalysisLogs@2
  inputs:
    ArtifactName: 'CodeAnalysisLogs'
    ArtifactType: 'Container'
    AllTools: true
    ToolLogsNotFoundAction: 'Standard'

- task: PostAnalysis@1
  inputs:
    AllTools: false
    APIScan: false
    BinSkim: false
    CodesignValidation: false
    CredScan: true
    FortifySCA: false
    FxCop: false
    ModernCop: false
    PoliCheck: false
    RoslynAnalyzers: false
    SDLNativeRules: false
    Semmle: false
    TSLint: false
    ToolLogsNotFoundAction: 'Standard'

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Unit Test
  inputs:
    command: test
    projects: '**/Keda.Durable.Scaler.Server.Test.csproj'
    arguments: '--configuration $(BuildConfiguration) --collect "Code coverage"'

- task: DotNetCoreCLI@2
  displayName: Integration Test
  inputs:
    command: test
    projects: '**/Keda.Durable.Scaler.Integration.Test.csproj'
    arguments: '--configuration $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
    zipAfterPublish: True

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()
